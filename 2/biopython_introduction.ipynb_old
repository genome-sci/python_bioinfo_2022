{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__講義で使用するファイルについて__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "本講義では配列ファイルの扱い方を学びます。使用するファイルは出芽酵母Saccharomyces cerevisiae S288Cのもので  \n",
    "https://www.ncbi.nlm.nih.gov/assembly/GCF_000146045.2  \n",
    "から取得した、ゲノム塩基配列（FASTA形式）と遺伝子アノテーションを含んだファイル（GenBank形式およびGFF形式）です。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# クラスの利用"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## クラスとオブジェクト"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pythonプログラムの中で扱われる文字列や数値、あるいはリストや辞書といったデータを「オブジェクト」と呼びます。また、データに対して何らかの処理を行う機能を持った関数やオブジェクトの設計図である「クラス」自体もオブジェクトの１つとして扱われます。したがって、Pythonプログラムの中で扱われるさまざまな「モノ」に対しての総称が「オブジェクト」といえます。オブジェクトにはデータの種類に応じて「型」があります。例えば、整数データはintオブジェクト、文字列データはstrオブジェクトと呼ばれ、これらはtype関数を使用することで確認ができます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "type(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "my_str = \"Hello world\"\n",
    "type(my_str)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "また、各オブジェクトがどのような機能（メソッド）を持っているかはdir関数を使用することで確認できます。\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(dir(my_str))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "strオブジェクトには大文字に変換するためのupperや分割を行うためのsplitといった文字列に対する操作を行うためのメソッドが含まれます。これらを使用するには、変数名の後にピリオドに続けてメソッド名を指定します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_str.upper()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_str.split(\" \")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "通常の関数と同じようにメソッドを呼び出すにはメソッド名の後の括弧に引数を指定します。上記の例で、upperは特に引数を必要としないため括弧内は空欄になっているのに対し、splitの場合には分割に用いる文字を引数に指定しています。なお、何も引数を指定せずにsplitを使用することもでき、その場合にはスペースやタブなど空白とみなせる文字が分割の対象となります。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "より複雑な機能やデータをもったオブジェクトを扱うために、拡張モジュールをインポートして定義済みの型（たとえばdatetimeオブジェクトなど）を利用したり、あるいは自分でオブジェクトの設計図（＝型）である「クラス」を定義したりすることができます。Biopythonをインポートすれば塩基配列やアミノ酸配列データを扱うためのSeqオブジェクトが利用可能ですが、ここでは自分でクラスを定義する例題としてFASTA形式で記述された配列データを格納するためのクラスを設計してみます。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "下記は１件のFASTA形式の配列データの例です。\n",
    "```\n",
    ">gene01 nucleotide sequence of tRNA-Ser\n",
    "TGGAGTGTTGTCCGAGCGGCTGAAGGAGCATGATTGGAAATCATGTATACGGGTAAATACCTGTATCGAGGGTTCAAATCCCTCACACTCCGT\n",
    "```\n",
    "\">\"で始まる行はタイトル行で、一般に最初の空白までが配列IDやアクセッション番号を示し、それ以降の文字列は遺伝子の機能名や任意の説明書きが含まれます。2行目が配列データを示します。この例では改行が含まれていませんが、60〜100文字単位で改行が含まれることもあります。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "これらの情報を格納するためには、  \n",
    "・配列ID (id)  \n",
    "・配列に対しての説明 (description)  \n",
    "・配列自体のデータ (seq）  \n",
    "といった情報を含んだクラスを設計することになります。また、この配列データに対しての操作としてGC含量（塩基配列中のGおよびCの割合）を得るためのメソッドを例として定義してみます。\n",
    "以下がその例です。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Fasta:\n",
    "    def __init__(self, id_, description, seq):\n",
    "        self.id = id_\n",
    "        self.description = description\n",
    "        self.seq = seq\n",
    "            \n",
    "    def get_gc_content(self):\n",
    "        g_count = self.seq.count(\"G\")\n",
    "        c_count = self.seq.count(\"C\")\n",
    "        gc_content = ( g_count + c_count ) / len(self.seq)\n",
    "        return gc_content"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ここでクラス内に定義した関数は、単独で用いる関数と区別してメソッドと呼ばれます。最初に定義したメソッド`__init__`は、オブジェクトの設計図であるクラスに実際のデータを格納してオブジェクトを生成する際に実行されるコンストラクタと呼ばれる特殊メソッドです。  \n",
    "メソッドの第一引数は自身のオブジェクトを指すもので、pythonでは慣例的に\"self\"が使われます。残りの３つはオブジェクト生成時に与える引数で、与えられた情報はオブジェクトの内部的な変数である`self.id`、`self.description`、`self.seq`にそれぞれ格納されます。なお、配列IDを示す引数は、組み込み関数である\"id\"と区別するために末尾に\"_\"を付けて\"id_\"としていますが、\"_\"を付けなくても動作します。  \n",
    "それでは、実際にデータを与えて配列データを格納したオブジェクトを作成してみます。引数\"self\"は内部的に使用されるだけなので、オブジェクト生成時には残りの3つの引数を与えることになります。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fasta = Fasta(\"gene01\", \"nucleotide sequence of tRNA-Ser\", \n",
    "              \"TGGAGTGTTGTCCGAGCGGCTGAAGGAGCATGATTGGAAATCATGTATACGGGTAAATACCTGTATCGAGGGTTCAAATCCCTCACACTCCGT\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "これで先ほどの１件のFASTA形式のデータを持ったオブジェクトを生成し、fastaという変数に格納できたことになります。設計図であるクラスに対し、このように実際のデータが格納されてできたオブジェクトの実体をインスタンスと呼びます。慣例的にpythonではクラスの名称には大文字で始まる名前を用い、インスタンスに対しては小文字を使用することが推奨されています。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "内部的な変数（インスタンス変数）にアクセスするには次のようにします。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fasta.description"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "クラスの定義時には\"self\"という変数を使用しましたがこれは定義時に用いた仮のものなので、実際のデータにアクセスするにはインスタンスを示す変数の後ろにピリオドをつけて指定をします。また、通常の変数と同じように新たな値を代入することも可能です。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "配列データ自体は通常の文字列と同じ扱いなので、次のように部分配列を取り出すことも可能です。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fasta.seq[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "生成されたfastaがどのようなクラスに属するか確認をしてみます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "type(fasta)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "このように独自に定義されたクラスFastaに属するオブジェクトであることがわかります。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "最後にこの配列のGC含量を求めてみます。インスタンス変数にアクセスしたときと同様にピリオドに続けてメソッド名を指定します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fasta.get_gc_content()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "get_gc_contentメソッドに定義されている引数は\"self\"だけで、これは外部から指定しなくても自動的に自分自身を指す変数として扱われるため特に引数を与える必要はありません。したがって、この例では括弧内は空欄となっています。\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 実践的なクラスの利用"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "先に定義した独自クラスFastaを利用した実践的なプログラム例として、複数のFASTA形式のデータを含んだファイル（multi FASTA）からデータを１件ずつ取り出しそれぞれの配列の配列IDや長さ、GC含量等を出力するプログラムを作成してみます。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "はじめにファイルを読み込んで１件ずつデータを取り出す関数を作成します。タイトル行は必ず`>`で始まるので、`>`を先頭に含んだ行が現れた時点で１件ずつデータを取り出すようにします。ただし、ファイルの先頭を読み込んだ時点では配列データが得られていませんので処理を分ける必要があります。また、ファイルを最後まで読み込んだ時点で、最後の配列データを取り出す処理を行います。\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_fasta(file_name):\n",
    "    with open(file_name) as fh:\n",
    "        line = next(fh)  # next関数を使い1行目（タイトル行）だけ読み込む。\n",
    "        seq_id, description = line.strip(\">\\n\").split(\" \", 1)  # タイトル行を分割し始めの空白までを配列ID、空白以降をdescriptionとする。空白が含まれていない場合エラーになるので注意。\n",
    "        seq = \"\"\n",
    "        for line in fh:  # 2行目以降の読み込み\n",
    "            if line.startswith(\">\"):  # \">\"で始まる行が現れたらその時点までの配列データを返す\n",
    "                yield Fasta(seq_id, description, seq)\n",
    "                seq_id, description = line.strip().strip(\">\").split(\" \", 1)  # 新たなタイトル情報を格納する\n",
    "                seq = \"\"\n",
    "            else:\n",
    "                seq += line.strip(\"\\n\").upper()  # \">\"で始まらない場合には、配列データを読み込んで追加していく。upperを加えたのは大文字に変換するため。\n",
    "        yield Fasta(seq_id, description, seq)  # ループ終了時に最後の配列データを返す\n",
    "                "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ここで定義した関数read_fastaは通常の関数とは異なりジェネレーター関数と呼ばれるものです。通常の関数が呼ばれるとreturn文が現れた時点で処理を終了して値を返すのに対し、ジェネレーター関数ではyield文を用いて値を返すという違いがあります。値を返した時点でジェネレーターは一旦処理を停止してその時点での情報を内部に保ち、再度呼び出しがあると再びyield文が現れる時点まで処理を行って新たな値を返します。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ジェネレータはリストと同じようにforループと組み合わせることで１件ずつデータを取り出すことが可能です。以下が実際の使用例で、配列１件ずつを取り出して配列ID、配列の説明、長さ、GC含量をタブ区切りの文字列として出力します。fを先頭につけた文字列は\"f文字列\"と呼ばれるPython3.6から導入された文字列を整形するのに便利な形式で、{ }で括った中に変数名を記載することで変数の中身を文字列中に埋め込むことができます。また、変数名の後に\":\"で区切って各種書式を指定することも可能で、下記の例では\":,d\"を付けて3桁ごとにカンマで数値の桁数を区切ったり、\":.1%\"と付けることで小数値を百分率表記にして小数点以下の桁数を指定したりすることができます。\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for fasta in read_fasta(\"../common/s288c.fna\"):\n",
    "    print(f\"{fasta.id}\\t{fasta.description}\\tLength={len(fasta.seq):,d}\\tG+C%={fasta.get_gc_content():.1%}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "上記の書き方はforループを使ってリストを扱うときとほぼ同じですがリストとジェネレーターとで大きく異なることとして、リストがすべてのデータをメモリ上に保持しているのに対して、ジェネレーターでは１件ずつのデータしか保持していない点があげられます。次世代シークエンサーデータのような巨大なデータを扱う際に、１件ずつデータを取り出して処理を行うのに役立ちます。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "クラスの利用例として、FASTA形式のデータを格納するためのクラス定義とmulti FASTA形式のファイルから１件ずつデータを取り出す例を紹介しました。クラスに様々なメソッドを加えることでより多様な処理を行えるように拡張可能です。たとえば、塩基配列のデータであれば相補鎖配列に変換するメソッドや、アミノ酸配列への翻訳を行うメソッドなどが考えられます。実際には、次の項で紹介するBiopythonを用いれば自分でクラス定義を行うことなく様々な機能が利用可能ですので、FASTA形式のファイルを読み込むのに自分でクラス定義を行う場面はあまり多くはないかもしれません。ただしBiopythonで読み込めないファイル形式もありますので、ここで紹介したような手法、すなわち、データを格納するための独自クラスを定義してファイルを読み込むための関数と組み合わせて処理を行うといった方法は様々な場面で応用が可能です。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__ジェネレーターについての補足__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ジェネレーターはfor文と組み合わせて用いることが多いですが、next関数を用いて１件ずつデータ取り出すことも可能です。その場合、まずはジェネレーター関数を呼び出してジェネレーターを作成します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fasta_generator = read_fasta(\"../common/s288c.fna\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ついでnext関数でデータを取り出します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fasta = next(fasta_generator)\n",
    "print(fasta.description)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "処理を繰り返すと次のデータが得られます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fasta = next(fasta_generator)\n",
    "print(fasta.description)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "また、list関数を組み合わせることで全データをリストに格納することができます。ただし、メモリはその分多く必要になりますので、ヒトゲノムのような巨大なサイズのデータを処理するには向きません。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "fasta_list = list(read_fasta(\"../common/s288c.fna\"))\n",
    "first_fasta = fasta_list[0]\n",
    "last_fasta = fasta_list[-1]\n",
    "print(first_fasta.description)\n",
    "print(last_fasta.description)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## より高度なクラスの利用"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 特殊メソッドやstaticmethod"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`__len__`を定義しておくと、len関数に引数として渡された場合の処理を定義できる。この例では配列の長さを返すようにしている。`__repr__`はオブジェクトに格納された情報の概要をprint関数やrepr関数で表示させるときの形式を定義するためのもので、おもにデバッグ用途に用いる。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Fasta:\n",
    "    def __init__(self, id_, description, seq):\n",
    "        self.id = id_\n",
    "        self.description = description\n",
    "        self.seq = seq\n",
    "            \n",
    "    def get_gc_content(self):\n",
    "        g_count = self.seq.count(\"G\")\n",
    "        c_count = self.seq.count(\"C\")\n",
    "        gc_content = ( g_count + c_count ) / len(self.seq)\n",
    "        return gc_content\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.seq)\n",
    "    \n",
    "    def __repr__(self):\n",
    "        return f\"<Fasta: {self.id}, {self.description}, Length={len(self)}>\"\n",
    "    \n",
    "    @staticmethod\n",
    "    def read_fasta(file_name):\n",
    "        def _parse_title(title):\n",
    "            title = title.strip(\">\\n \")\n",
    "            if \" \" in title:\n",
    "                seq_id, description = title.split(\" \", 1)\n",
    "            else:\n",
    "                seq_id, description = title, \"\"\n",
    "            return seq_id, description\n",
    "        \n",
    "        with open(file_name) as fh:\n",
    "            line = next(fh)\n",
    "            seq_id, description = _parse_title(line)\n",
    "            seq = \"\"\n",
    "            for line in fh:\n",
    "                if line.startswith(\">\"):\n",
    "                    yield Fasta(seq_id, description, seq)\n",
    "                    seq_id, description = _parse_title(line)\n",
    "                    seq = \"\"\n",
    "                else:\n",
    "                    seq += line.strip(\"\\n\").upper()\n",
    "            yield Fasta(seq_id, description, seq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fasta_list = list(Fasta.read_fasta(\"../common/s288c.fna\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fasta_list = sorted(fasta_list, key=len, reverse=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for fasta in fasta_list:\n",
    "    print(fasta)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### オブジェクト指向"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "継承、カプセル化、ポリモルフィズム等（講義では詳細省略）"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Biopythonの使い方"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Biopythonは生命科学に関するデータを扱うための拡張ライブラリです。ここではBiopythonを使った配列ファイルの処理方法を扱います。\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Biopythonのインポート\n",
    "# SeqIOはFASTA, GenBankなどの配列データの読み書きを行うためのモジュール\n",
    "from Bio import SeqIO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# FASTAファイルの読み込み"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 基本的な使い方"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fasta_file_name = \"../common/s288c.fna\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "records = SeqIO.parse(fasta_file_name, \"fasta\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# records は ジェネレーター\n",
    "type(records)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ジェネレーターはリストと同じようにfor文を使って１件ずつデータを取り出すことができますが、リストは全データをメモリに保持しているのに対し、ジェネレーターは一度に１件ずつしかデータを保持していないという違いがあります。`list(records)`とすればリストに変換することもできます。\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "for文を使って順次データを取り出す方法以外に、次のようにnext関数を使用する方法があります。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 一件目の配列データを取り出す\n",
    "r1 = next(records)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 配列データは SeqRecord オブジェクトになっています。\n",
    "# SeqRecord は配列自体の情報の他に、ID, description, アノテーションなども含んでいます。\n",
    "r1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "nextを繰り返し用いると以降の配列を順次取り出すことができます。前のデータに戻ることはできませんので最初に戻るには`SeqIO.parse`を繰り返し行う必要があります。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(r1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 配列ID, descriptionなどの確認、長さは len 関数で取得できます。\n",
    "print(r1.id)\n",
    "print(r1.description)\n",
    "print(len(r1))\n",
    "print(r1.features)  # fastaファイルなのでアノテーションは含まれていない --> featuresは空"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 配列を取り出します。\n",
    "r1_seq = r1.seq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 配列はSeq型のオブジェクトになっています。\n",
    "r1_seq"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Seq型オブジェクトは部分配列の切り出し、相補鎖変換 reverse_compliment, 翻訳 translate などの機能を持ちます"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "r1_seq[1806:2169]  # 遺伝子コード領域の切り出し\n",
    "# この方法以外にも、FeatureLocationオブジェクトのextractメソッドを使用する方法もあります。(後で紹介）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 相補鎖変換\n",
    "r1_seq[1806:2169].reverse_complement()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 相補鎖変換　→　翻訳\n",
    "r1_seq[1806:2169].reverse_complement().translate()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# GenBank形式への変換  --> ValueError: Need a Nucleotide or Protein alphabet というエラーが出ます\n",
    "print(r1.format(\"genbank\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# エラーを回避するには、FASTA配列の\"Alphabet\"を明示的に指定する必要があります。\n",
    "from Bio.Alphabet import generic_dna\n",
    "records = SeqIO.parse(fasta_file_name, \"fasta\", generic_dna)\n",
    "r1 = next(records)\n",
    "print(r1.format(\"genbank\")[:1000])  # 長いので先頭の1000文字だけ表示しています"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## すべてのエントリー (配列) をループで回す"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# recordsはジェネレータなので、リストと同じようにforループで回すことができます。\n",
    "records = SeqIO.parse(fasta_file_name, \"fasta\")\n",
    "for r in records:\n",
    "    print(\"Seq ID=\", r.id)\n",
    "    print(\"Length=\", len(r))\n",
    "    print(r.seq[:50] + \"...\")\n",
    "    print(\"----\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# list関数を使うことでも同様のことが可能。(ファイル全体をメモリに読み込むので大きいファイルの扱いには注意)\n",
    "records = list(SeqIO.parse(fasta_file_name, \"fasta\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# リストにした場合には、indexを指定してデータを抽出することが可能。例えば、最後の配列を取り出すには-1を指定する。\n",
    "records[-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__練習__  \n",
    "s288c株の遺伝子タンパク質配列FASTAファイル（s288c.protein.faa）を読み込み、閾値未満の長さの配列を取り除き、降順（長いもの順）に出力するスクリプトを作成せよ。  \n",
    "下記のテンプレートを使うこと。下にヒントがあります。（解答例はfasta_length_filter.pyという名称で保存しています）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "protein_fasta_file = \"../common/s288c.protein.faa\"\n",
    "records = list(SeqIO.parse(protein_fasta_file, \"fasta\")) \n",
    "threshold = 1000\n",
    "\n",
    "# 閾値未満のものを除く処理を追加\n",
    "# recordsを降順にソートする\n",
    "\n",
    "i = 0\n",
    "for r in records:\n",
    "    print(r)\n",
    "    print(\"Length=\", len(r))\n",
    "    print(\"-----\")\n",
    "    i += 1\n",
    "    if i == 5:\n",
    "        break  # 講習用に5件出力した時点で処理を停止する。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__ヒント1__  \n",
    "リスト内包表記を使ったフィルタリング"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# リスト内包表記を使うとリストから新しいリストを生成できる。\n",
    "L = [1, 2, 3, 4, 5]\n",
    "[x*x for x in L]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# リストから、値が3より大きい要素を抽出\n",
    "L = [1, 2, 3, 4, 5]\n",
    "[x for x in L if x>3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__ヒント２__  \n",
    "keyを指定して様々な方法でソートを行う"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 文字列の長さでソート\n",
    "L = [\"cat\",  \"horse\", \"buffalo\", \"dog\", \"ox\", \"hippopotamus\", \"tiger\"]\n",
    "sorted(L, key=len, reverse=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "keyには\"大小\"や\"順番\"が判定できる値を返す任意の関数を指定することができる。自分で定義した関数を指定することもできる。  \n",
    "下記はlambda式（無名関数）を使った例"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# lambda式を使う例。geneの後の数字部分でソート\n",
    "L = [\"gene_1\", \"gene_10\", \"gene_2\", \"gene_21\", \"gene_101\", ]\n",
    "print(\"普通にソート\", sorted(L))\n",
    "print(\"数字部分でソート\", sorted(L, key=lambda x: int(x.split(\"_\")[1])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## ファイルを読み込み、辞書として格納"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__本講義では詳細は割愛します__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# SeqIO.to_dict関数を使うと、配列IDをkeyとした辞書にデータを格納することができます。\n",
    "records = SeqIO.parse(fasta_file_name, \"fasta\")\n",
    "dict_records = SeqIO.to_dict(records)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 全17件の辞書ができます\n",
    "len(dict_records)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dict_records.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dict_records[\"NC_001224.1\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "上記の方法はファイルに含まれるすべての配列情報をメモリに格納するので、大きなファイルの取り扱いには向いていません。  \n",
    "別の方法としてSeqIO.index関数を使う方法もあります。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "idx_records = SeqIO.index(fasta_file_name, \"fasta\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# idx_recordsはSeq\n",
    "type(idx_records)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# idx_recordsは辞書と同じように使用できます。\n",
    "# to_dictと異なりメモリ上にデータを保持していないため、処理速度は若干遅くなります。\n",
    "idx_records.get(\"NC_001224.1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(idx_records.get_raw(\"NC_001224.1\").decode()[:300])  # get_rawで元の形式のまま取り出せます(長いので先頭300文字のみ表示しています)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## pyfaidxを使った高速な配列へのアクセス"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__本講義では詳細は割愛します__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "pyfaidxはFASTAファイルのインデックス（\".fai\"ファイル）を利用することで、FASTA形式のファイルへの高速なランダムアクセスが可能です。minicondaのデフォルトパッケージには含まれていないので、個別にインストールする必要があります。インストールはターミナルで\"conda install -c bioconda pyfaidx\"または\"pip install faidx\"を実行します。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "pyfaidxの簡単な使い方は以下の通りです。詳細は公式の[ドキュメント](https://pythonhosted.org/pyfaidx/)を参考にしてください。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from pyfaidx import Fasta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "records = Fasta(fasta_file_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 配列ID一覧\n",
    "records.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 部分配列の取り出し\n",
    "record = records[\"NC_001133.9\"]\n",
    "subseq = record[100:120]\n",
    "print(subseq.name)\n",
    "print(subseq.seq)\n",
    "print(subseq.start)\n",
    "print(subseq.end)\n",
    "print(subseq.fancy_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 相補鎖配列の取得\n",
    "subseq.reverse.complement"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GenBankファイルの読み込み\n",
    "FASTAファイルと同様に SeqIO.parse を利用して読み込み可能。format=\"genbank\"を指定します。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## アノテーション情報の確認"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "FASTAファイルの場合と異なり、GenBank形式には配列に対する様々な注釈情報 (アノテーション) が含まれます。  \n",
    "Biopythonを利用すればこれらを簡単に取得することができます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gbk_file_name = \"../common/s288c.gbk\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ここではlist関数を利用して、全データをリストとして読み込んでいます。\n",
    "records = list(SeqIO.parse(gbk_file_name, \"genbank\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# １件目 (0番目)\n",
    "r0 = records[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(dir(r0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# FASTAファイルを読み込んだときには空だったannotationsに配列のメタデータが辞書として格納されています。\n",
    "# ここでの \"annotation\" は配列全体に対する生物種情報や登録者情報といったメタデータのことを示します。\n",
    "# 遺伝子領域などの注釈情報は後述のfeaturesに含まれています。\n",
    "r0.annotations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# アノテーションされた遺伝子領域の情報はfeaturesにリストとして格納されています。(先頭10件のみ表示しています)\n",
    "r0.features[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 先頭(0番目)のfeatureを取り出します\n",
    "f0 = r0.features[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 先頭のfeatureはsource featureです。\n",
    "# source featureはその配列の由来について記述したもので、通常は配列1本について先頭に1件のみ記載されます。\n",
    "print(f0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3-5番目のfeature (gene) を取り出します\n",
    "f3, f4, f5 = r0.features[3:6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# featureのおもな構成要素は、type, location, qualifiers です。\n",
    "# ここでは、gene, mRNA, CDS に同じ、locus_tag　が割り当てられていることから、これらが対応関係にあることがわかります。\n",
    "print(f3)\n",
    "print(f4)\n",
    "print(f5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "下記がGenBankファイル中での５番目のfeatureについての記載\n",
    "```\n",
    "     CDS             complement(1807..2169)\n",
    "                     /gene=\"PAU8\"\n",
    "                     /locus_tag=\"YAL068C\"\n",
    "                     /note=\"hypothetical protein; member of the seripauperin\n",
    "                     multigene family encoded mainly in subtelomeric regions\"\n",
    "                     /codon_start=1\n",
    "                     /product=\"seripauperin PAU8\"\n",
    "                     /protein_id=\"NP_009332.1\"\n",
    "                     /db_xref=\"GeneID:851229\"\n",
    "                     /db_xref=\"SGD:S000002142\"\n",
    "                     /translation=\"MVKLTSIAAGVAAIAATASATTTLAQSDERVNLVELGVYVSDIR\n",
    "                     AHLAQYYMFQAAHPTETYPVEVAEAVFNYGDFTTMLTGIAPDQVTRMITGVPWYSSRL\n",
    "                     KPAISSALSKDGIYTIAN\"\n",
    "     gene            <2480..>2707\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "以下に、上記の記載情報を取り出す方法を説明します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# qualifiersは辞書（順番情報を保持したOrderedDict）になっています。\n",
    "f5.qualifiers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# db_xref情報を取り出してみます。（関連するDBへの参照情報です）\n",
    "# 2件の情報がリストに格納されていることがわかります。\n",
    "f5.qualifiers[\"db_xref\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 遺伝子産物名 (product) を確認してみます。\n",
    "# 文字列として取り出すには f5.qualifiers[\"product\"][0] などとする必要があります。\n",
    "f5.qualifiers[\"product\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 文字列として取り出すには f5.qualifiers[\"product\"][0] とする必要があります。\n",
    "f5.qualifiers[\"product\"][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# note に情報を追加してみます。\n",
    "f5.qualifiers[\"note\"].append(\"Test\")\n",
    "print(f5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# locationを確認してみます。\n",
    "# 0を起点としていますので、開始位置1806は実際には1807番目の塩基を指します。\n",
    "f5.location"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# locationオブジェクトを利用して配列の切り出しを行うことができます。\n",
    "# locationのstrandが-1の場合には、自動的に相補鎖側を切り出してくれます。\n",
    "# extractメソッドの引数には SeqRecord または Seq オブジェクトどちらを与えてもOKです。\n",
    "f5.location.extract(r0.seq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 配列を切り出して翻訳したものを translation qualifier の値と比較してみます。\n",
    "print(str(f5.location.extract(r0.seq).translate()))\n",
    "print(f5.qualifiers[\"translation\"][0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ファイル全体のfeatureをループで回す"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "record(entry) --> feature --> qualifier の階層構造になっていることを意識してください"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "例としてCDSフィーチャーの中から全てのアミノ酸配列を辞書として取得する処理を実装します"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# すべてのアミノ酸配列を辞書として取得 (translationを含まないCDSがあったため失敗した)\n",
    "D = {}\n",
    "for record in SeqIO.parse(gbk_file_name, \"genbank\"):\n",
    "    for feature in record.features:\n",
    "        if feature.type == \"CDS\":\n",
    "            locus_tag = feature.qualifiers[\"locus_tag\"][0]\n",
    "            translation = feature.qualifiers[\"translation\"][0]\n",
    "            D[locus_tag] = translation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# すべてのアミノ酸配列を辞書として取得 ver2 (try-exceptでエラーを補足し、原因を確認)\n",
    "D = {}\n",
    "for record in SeqIO.parse(gbk_file_name, \"genbank\"):\n",
    "    for feature in record.features:\n",
    "        if feature.type == \"CDS\":\n",
    "            try:\n",
    "                locus_tag = feature.qualifiers[\"locus_tag\"][0]\n",
    "                translation = feature.qualifiers[\"translation\"][0]\n",
    "                D[locus_tag] = translation\n",
    "            except KeyError as e:\n",
    "                # エラーが起こった場合の処理\n",
    "                print(feature) # 問題のあったfeatureを表示\n",
    "                raise e  # 再度、エラーを生じさせて処理を停止させる。\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "↑ pseudo qualifierがある場合には、translationが存在しないことがエラーの原因であった。  \n",
    "そこで、pseudoの場合には処理を行わないことにする。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# すべてのアミノ酸配列を辞書として取得 ver3 (完成版)\n",
    "D = {}\n",
    "for record in SeqIO.parse(gbk_file_name, \"genbank\"):\n",
    "    for feature in record.features:\n",
    "        if feature.type == \"CDS\":\n",
    "            if \"pseudo\" in feature.qualifiers:\n",
    "                continue\n",
    "            try:\n",
    "                locus_tag = feature.qualifiers[\"locus_tag\"][0]\n",
    "                translation = feature.qualifiers[\"translation\"][0]\n",
    "                D[locus_tag] = translation\n",
    "            except KeyError as e:\n",
    "                print(feature.qualifiers)\n",
    "                raise e\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# すべてのアミノ酸配列を辞書として取得 ver4 (改良版)\n",
    "# get 関数を使用してkeyが存在しない場合にも対応\n",
    "D = {}\n",
    "for record in SeqIO.parse(gbk_file_name, \"genbank\"):\n",
    "    for feature in record.features:\n",
    "        locus_tag = feature.qualifiers.get(\"locus_tag\", [\"\"])[0]  # get 関数を使い locus_tag qualifierが存在しない場合には  [\"\"] を返す\n",
    "        translation = feature.qualifiers.get(\"translation\", [\"\"])[0]\n",
    "        if locus_tag and translation: # locus_tagおよびtranslationのいずれかが空文字列のときには処理しない\n",
    "            D[locus_tag] = translation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# getについて\n",
    "test_dict = {1:100, 2:200, 3:300}\n",
    "print(test_dict.get(1))  # 100が返る\n",
    "print(test_dict.get(4))  # keyが存在しない場合、None\n",
    "print(test_dict.get(4, 400))  # 第２引数としてkeyが存在しない場合に返る値を指定可能。400が返る。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[練習]**  \n",
    "GenBankファイルの中身をすべてforループで辿り、アミノ酸配列(translation)・ローカスタグ(locus_tag)・遺伝子産物名(product)を取得し、  \n",
    "下記のような FASTA 形式で出力するスクリプトを作成せよ。  \n",
    "ただし product については空欄のものがあれば \"unknown protein\" とすること（getを使うと良い）。  \n",
    "アミノ酸配列は `feature.qualifiers.get(\"translation\", [\"\"])[0]` で取得可能だが、余裕があれば`location.extract`使用すること。  \n",
    "```\n",
    ">YAL068C seripauperin PAU8\n",
    "MVKLTSIAAGVAAIAATASATTTLAQSDERVNLVELGVYVSDIRAHLAQYYMFQAAHPTETYPVEVAEAVFNYGDFTTMLTGIAPDQVTRMITGVPWYSSRLKPAISSALSKDGIYTIAN\n",
    ">YAL067W-A hypothetical protein\n",
    "MPIIGVPRCLIKPFSVPVTFPFSVKKNIRILDLDPRTEAYCLSLNSVCFKRLPRRKYFHLLNSYNIKRVLGVVYC\n",
    ">YAL067C putative permease SEO1\n",
    "MYSIVKEIIVDPYKRLKWGFIPVKRQVEDLPDDLNSTEIVTISNSIQSHETAENFITTTSEKDQLHFETSSYSEHKDNVNVTRSYEYRDEADRPWWRFFDEQEYRINEKERSHNKWYSWFKQGTSFKEKKLLIKLDVLLAFYSCIAYWVKYLDTVNINNAYVSGMKEDLGFQGNDLVHTQVMYTVGNIIFQLPFLIYLNKLPLNYVLPSLDLCWSLLTVGAAYVNSVPHLKAIRFFIGAFEAPSYLAYQYLFGSFYKHDEMVRRSAFYYLGQYIGILSAGGIQSAVYSSLNGVNGLEGWRWNFIIDAIVSVVVGLIGFYSLPGDPYNCYSIFLTDDEIRLARKRLKENQTGKSDFETKVFDIKLWKTIFSDWKIYILTLWNIFCWNDSNVSSGAYLLWLKSLKRYSIPKLNQLSMITPGLGMVYLMLTGIIADKLHSRWFAIIFTQVFNIIGNSILAAWDVAEGAKWFAFMLQCFGWAMAPVLYSWQNDICRRDAQTRAITLVTMNIMAQSSTAWISVLVWKTEEAPRYLKGFTFTACSAFCLSIWTFVVLYFYKRDERNNAKKNGIVLYNSKHGVEKPTSKDVETLSVSDEK\n",
    "...\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "解答例は\"get_protein_from_gbk.py\"という名称で保存してある。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "i = 0\n",
    "for record in SeqIO.parse(gbk_file_name, \"genbank\"):\n",
    "    for feature in record.features:\n",
    "        if feature.type != \"CDS\":\n",
    "            continue  # CDSでない場合には処理をスキップ    \n",
    "        if \"pseudo\" in feature.qualifiers:\n",
    "            continue    # pseudoである場合には処理をスキップ\n",
    "        locus_tag = feature.qualifiers.get(\"locus_tag\", [\"\"])[0]\n",
    "        translation = feature.qualifiers.get(\"translation\", [\"\"])[0]\n",
    "        print(locus_tag)\n",
    "        ### productを取得する処理を追加 ###\n",
    "        i += 1\n",
    "        ### print で出力する処理を追加\n",
    "        if i == 5:  # 動作確認のため5件のみ出力したところで処理を停止\n",
    "            break\n",
    "    break # 動作確認のため最初の配列のみ処理するようにしている\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GFFファイルの読み込み"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__本項は講義では扱いません__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "現状ではBiopython単独ではGFFファイルの読み書きはできないため、BCBioGFFを利用する  \n",
    "GFFファイルはGenBankファイルと同等の情報を保持できるが、ID-Parentを対応づけることによって明示的にgene-mRNA-CDSの階層構造を表現している。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# BCBioのインポート\n",
    "# GFFを扱うためのモジュール (現時点ではBiopythonには含まれていないため、別にインストールする必要がある conda install -c bioconda bcbiogff または pip install bcbio-gff）\n",
    "from BCBio import GFF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ここで使うGFFファイルはRNAseq解析用に遺伝子ID(gene_id)情報を付け足したものです。ファイルの作り方については後述\n",
    "gff_file_name = \"../common/s288c_e.gff\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "records = GFF.parse(open(gff_file_name))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 最初の配列の先頭10件のfeatureを表示\n",
    "# GenBankファイルの時とは異なり、mRNAやCDS featureが見えません。\n",
    "# GFFファイルではmRNAはgeneの\"sub_features\"という扱いになっているためです。\n",
    "r0 = next(records)\n",
    "r0.features[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 最初のgene featureを取得\n",
    "gene = r0.features[4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sub_featuresの中にmRNA featureが含まれています。\n",
    "# この例ではmRNAは1件のみですが、複数のmRNAが含まれる場合もあります。\n",
    "gene.sub_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mRNA featureを取得\n",
    "mrna = gene.sub_features[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mRNAのsub_featuresを確認\n",
    "# CDS featureとexon featureが含まれています。\n",
    "# sub_featureの種類はファイルによって異なります。CDSのみの場合や、非翻訳領域 (UTR) が含まれている場合もあります。\n",
    "mrna.sub_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sub_features の階層構造をたどり、どのようなfeatureが含まれているかを確認してみる。。\n",
    "S=set()\n",
    "for record in GFF.parse(open(gff_file_name)):\n",
    "    if record.id == \"NC_001224.1\":\n",
    "        continue  # ミトコンドリア配列は除外\n",
    "    for f in record.features:\n",
    "        feature_type_1 = f.type\n",
    "        S.add(feature_type_1)\n",
    "        for sf in f.sub_features:\n",
    "            feature_type_2 = feature_type_1 + \" -> \" + sf.type\n",
    "            S.add(feature_type_2)\n",
    "            for ssf in sf.sub_features:\n",
    "                feature_type_3 = feature_type_2 + \" -> \" + ssf.type\n",
    "                S.add(feature_type_3)\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sorted(list(S), key=lambda x:(x.count(\"->\"), x))  # 階層数でソートしたあと、アルファッベット順でソートして表示している"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 補遺"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "下記はこの講習で使用する各種ファイルを作成したときの手順です。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 遺伝子IDと遺伝子産物名の対応表の作成手順"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "次の講義で使用予定の\"gene_id_product.tsv\"を作成します\n",
    "各mRNAフィーチャーのproductを取得してgene_idとともに出力を行います。\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "D = {}\n",
    "for record in GFF.parse(open(gff_file_name)):\n",
    "    for f in record.features:\n",
    "        for sf in f.sub_features:\n",
    "            if f.type == \"gene\" and sf.type == \"mRNA\":\n",
    "                gene_id = sf.qualifiers[\"gene_id\"][0]\n",
    "                product = sf.qualifiers[\"product\"][0]\n",
    "                D[gene_id] = product\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ファイルに書き出す\n",
    "out_file = \"../common/gene_id_product.tsv\"\n",
    "with open(out_file, \"w\") as f:\n",
    "    for key, value in D.items():\n",
    "        f.write(key + \"\\t\" + value + \"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## GFFファイルに\"gene_id\"を付与するスクリプト"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "RNAseqのマッピング結果(BAMファイル)から、各遺伝子ごとにマップされたリード数をカウントする際にGFF形式のファイルを用いました。NCBIから取得したGFF形式のファイルに遺伝子IDとして使うのに適切な情報がなかったので、下記の方法で\"gene_id\"というattirbuteを加えています。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "スクリプトの一部抜粋です。完成品はadd_gene_id.pyという名称でgithubの1-3ディレクトリに保存してあり、  \n",
    "```python add_gene_id.py input.gff output.gff```  \n",
    "とうように入力ファイル名と出力ファイル名を指定します。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "```\n",
    "records = list(GFF.parse(open(file_name)))\n",
    "\n",
    "gene_cnt = 0\n",
    "for r in records:\n",
    "    for f in r.features:\n",
    "        if f.type == \"gene\" or f.type == \"pseudogene\":\n",
    "            gene_cnt += 1\n",
    "            gene_id = \"gene_\" + str(gene_cnt).zfill(4)\n",
    "            f.qualifiers[\"gene_id\"] = [gene_id]\n",
    "            for sf in f.sub_features:\n",
    "                sf.qualifiers[\"gene_id\"] = [gene_id]\n",
    "                for ssf in sf.sub_features:\n",
    "                    ssf.qualifiers[\"gene_id\"] = [gene_id]\n",
    "\n",
    "with open(out_file_name, \"w\") as fh:\n",
    "    GFF.write(records, fh)\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  },
  "toc": {
   "colors": {
    "hover_highlight": "#DAA520",
    "running_highlight": "#FF0000",
    "selected_highlight": "#FFD700"
   },
   "moveMenuLeft": true,
   "nav_menu": {
    "height": "84px",
    "width": "253px"
   },
   "navigate_menu": true,
   "number_sections": true,
   "sideBar": true,
   "threshold": 4,
   "toc_cell": false,
   "toc_section_display": "block",
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
